<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1492634446953">{:repl-history {:ide [], :local [&quot;(ns chess-960.chess\n  (:gen-class))\n\n(def board (vec (take 8 (repeat nil))))\n\n(defn options []\n  {:bishop  (rand-nth [0 2 4 6])\n   :bishop2 (rand-nth [1 3 5 7])\n   :queen   (rand-nth [0 1 2 3 4 5])\n   :knight  (rand-nth [0 1 2 3 4])\n   :knihgt2 (rand-nth [0 1 2 3])})\n\n(defn nth-empty [n list]\n  (let [clear (filterv identity\n                       (map #(if (not %)\n                               %2\n                               nil)\n                            list (range)))]\n    (nth clear n)))\n\n(defn setup []\n  (let [B-in  (assoc board (:bishop (options)) \&quot;B\&quot;)\n        B2-in (assoc B-in (:bishop2 (options)) \&quot;B\&quot;)\n        Q-in  (assoc B2-in (nth-empty (:queen (options)) B2-in) \&quot;Q\&quot;)\n        K-in  (assoc Q-in (nth-empty (:knight (options)) Q-in) \&quot;N\&quot;)\n        K2-in (assoc K-in (nth-empty (:knight2 (options)) K-in) \&quot;N\&quot;)]\n    K2-in))&quot; &quot;(def board (vec (take 8 (repeat nil))))\n\n(defn options []\n  {:bishop  (rand-nth [0 2 4 6])\n   :bishop2 (rand-nth [1 3 5 7])\n   :queen   (rand-nth [0 1 2 3 4 5])\n   :knight  (rand-nth [0 1 2 3 4])\n   :knihgt2 (rand-nth [0 1 2 3])})\n\n(defn nth-empty [n list]\n  (let [clear (filterv identity\n                       (map #(if (not %)\n                               %2\n                               nil)\n                            list (range)))]\n    (nth clear n)))\n\n(defn setup [list]\n  (let [B-in  (assoc list (:bishop (options)) \&quot;B\&quot;)\n        B2-in (assoc B-in (:bishop2 (options)) \&quot;B\&quot;)\n        Q-in  (assoc B2-in (nth-empty (:queen (options)) B2-in) \&quot;Q\&quot;)\n        K-in  (assoc Q-in (nth-empty (:knight (options)) Q-in) \&quot;N\&quot;)\n        K2-in (assoc K-in (nth-empty (:knight2 (options)) K-in) \&quot;N\&quot;)]\n    K2-in))&quot; &quot;(setup board)&quot; &quot;(setuo)&quot; &quot;(options)&quot; &quot;board&quot; &quot;(assoc-in board 3)&quot; &quot;(assoc-in board [3])&quot; &quot;(assoc-in board [3] 5)&quot; &quot;(assoc-in board 3 5)&quot; &quot;(assoc board 3 5)&quot; &quot;(.indexOf board nil)&quot; &quot;(filter identity [1 2 3 nil 23  4124])&quot; &quot;(filterv identity [1 2 3 nil 23  4124])&quot; &quot;options&quot; &quot;(us)&quot; &quot;(get :queen)&quot; &quot;(get )&quot; &quot;(options :queen)&quot; &quot;(:queen options)&quot; &quot;(get)&quot; &quot;(nth-empty [0 1 nil])&quot; &quot;(nth-empty [0 1 nil] 3)&quot; &quot;(nth-empty 3 [0 1 nil])&quot; &quot;(nth-empty 3 [0 1 nil 3 4 5 nil])&quot; &quot;(nth-empty 3 board)&quot; &quot;(nth-empty 0 board)&quot; &quot;(nth-empty 1 board)&quot; &quot;(nth-empty 1 [0 1 2 nil nil])&quot; &quot;(nth-empty 1 [0 1 2 nil nil 5 6 nil])&quot; &quot;(nth-empty 2 [0 1 2 nil nil 5 6 nil])&quot; &quot;(assoc [1 2 3] 0 \&quot;hh\&quot;)&quot; &quot;(assoc board (:bishop options) \&quot;hh\&quot;)&quot; &quot;(:bishop options)&quot; &quot;(:bishop (options))&quot; &quot;(some nil board)&quot; &quot;(some not board)&quot; &quot;(some not [1 2 3])&quot; &quot;(some not [1 2 nil])&quot; &quot;(not-any not [1 2 3])&quot; &quot;(not-any? not [1 2 3])&quot; &quot;(not-any? not [nil 2 3])&quot; &quot;(not-any? not [nil nil])&quot; &quot;(setup)&quot; &quot;(not \&quot;B\&quot;)&quot; &quot;(assoc [0 1])&quot; &quot;(fill-b board)&quot; &quot;(test)&quot; &quot;(distinct? [1 2 3 3])&quot; &quot;(distinct? [1 2 3 3 4 ])&quot; &quot;(distinct? [1 2 3 3 4 5 6])&quot; &quot;(distinct? [1 2 3])&quot; &quot;(apply distinct? [1 2 3])&quot; &quot;(apply distinct? [1 2 3 3])&quot; &quot;(use 'chess-960.chess)&quot; &quot;(apply distinct? (test))&quot; &quot;(close)&quot;], :remote []}}</component>
</project>